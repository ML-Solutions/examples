from __future__ import print_function
from scipy import misc
from array import array

import argparse
import keras
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
import os

from missinglink import KerasCallback

batch_size = 32
num_classes = 10
epochs = 100
data_augmentation = False
num_predictions = 20
save_dir = os.path.join(os.getcwd(), 'saved_models')
model_name = 'keras_cifar10_trained_model.h5'

# The data, split between train and test sets:

parser = argparse.ArgumentParser()
parser.add_argument('--project')
parser.add_argument('--data-volume')
args = parser.parse_args()

keras_callback = KerasCallback(project_id=args.project)

classes = {
    'airplane': 0,
    'automobile': 1,
    'bird': 2,
    'cat': 3,
    'deer': 4,
    'dog': 5,
    'frog': 6,
    'horse': 7,
    'ship': 8,
    'truck': 9
}


def data_callback(file_name, metadata):
    if len(file_name) == 0:
        return None, None

    data = misc.imread(file_name[0])

    label = classes[metadata[0]['@path'].split('_')[1].replace('.png', '')]

    return data, keras.utils.to_categorical(label, num_classes)


train_generator = keras_callback.get_data_generator("(@version:3185a934dcf1c44673f0b45a7e2a272baa536bbf) AND (@path:train/*) @seed:1337", data_callback, args.data_volume).flow().as_keras_sequence()
test_generator = keras_callback.get_data_generator("(@version:3185a934dcf1c44673f0b45a7e2a272baa536bbf) AND (@path:test/*) @seed:1337", data_callback, args.data_volume).flow().as_keras_sequence()

model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same', input_shape=[32, 32, 3]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

# initiate RMSprop optimizer
opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

if not data_augmentation:
    print('Not using data augmentation.')
    model.fit_generator(
        train_generator,
        epochs=epochs,
        workers=4,
        validation_data=test_generator,
        callbacks=[keras_callback])
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
        zca_epsilon=1e-06,  # epsilon for ZCA whitening
        # randomly shift images horizontally (fraction of total width)
        width_shift_range=0.1,
        # randomly shift images vertically (fraction of total height)
        height_shift_range=0.1,
        # set mode for filling points outside the input boundaries
        horizontal_flip=True,  # randomly flip images
        # fraction of images reserved for validation (strictly between 0 and 1)
    )

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(
        datagen.flow(x_train, y_train, batch_size=batch_size),
        epochs=epochs,
        validation_data=(x_test, y_test),
        workers=4)

# Save model and weights
if not os.path.isdir(save_dir):
    os.makedirs(save_dir)
model_path = os.path.join(save_dir, model_name)
model.save(model_path)
print('Saved trained model at %s ' % model_path)

# Score trained model.
scores = model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])
